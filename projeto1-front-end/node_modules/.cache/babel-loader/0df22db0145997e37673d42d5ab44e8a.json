{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Engenharia\\\\Desktop\\\\Projetos\\\\Projeto-1\\\\projeto1-front-end\\\\src\\\\components\\\\extendedTableRow\\\\index.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { UAParser } from 'ua-parser-js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport ExpandedRowContent from '../expandedRowContent';\n/**\r\n * @file module:src/components/extendedTableRow/index.jsx  \r\n * @param {array} props.thisUserData - Array containing data from the user __currentAccess, currentAddress, currentJob, productsBuyed__\r\n * @returns - extended row, when click in the button will show the content of the field name clicked \r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExtendedTableRow(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Variables to pass the specified content needed to custom expanded box\n  // let accessData = props.thisUserData.currentAccess; \n  // let addressData = props.thisUserData.currentAddress; \n  // let jobData = props.thisUserData.currentJob; \n  // let productData = props.thisUserData.productsBuyed; \n  // let parser = new UAParser();\n  // let uaString = props.thisUserData.currentAccess.user_access_user_agent;\n  // let OS = parser.setUA(uaString).getOS();\n  // props.thisUserData.currentAccess.userOs = OS.name+' '+OS.version;\n  const [boxColapsed, setBoxColapsed] = useState(null);\n  /**\r\n   * @function module:src/components/extendedTableRow/extendedTableRow~handleClick\r\n   * @summary - when the button is clicked, open only the clicked field in the device window \r\n   */\n\n  function handleClick(newIndex) {\n    let currentIndex = boxColapsed;\n    if (newIndex !== currentIndex) currentIndex = newIndex;else currentIndex = null;\n    setBoxColapsed(currentIndex);\n  }\n\n  useEffect(() => {\n    console.log(\"CHAMANDO USER EFFECT\");\n    console.log(\"BOX COLAPSED\", boxColapsed); // getExpandedBoxes();\n  }, [getExpandedBoxes()]);\n\n  function getExpandedBoxes() {\n    _s();\n\n    console.log(\"BOX COLLAPSED\", boxColapsed);\n    console.log(Object.keys(props.fieldList));\n    let titles = Object.keys(props.fieldList);\n    useEffect(() => {});\n    return titles.map((title, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: style.boxWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: style.extendedLineTitle,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick({\n            index\n          }),\n          style: style.boxButton,\n          children: [boxColapsed && boxColapsed.index === index ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowUp,\n            id: props.index,\n            style: {\n              fontSize: \"30px\",\n              color: \"#363636\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowRight,\n            id: props.index,\n            style: {\n              fontSize: \"30px\",\n              color: \"#363636\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this), boxColapsed && boxColapsed.index === index ? /*#__PURE__*/_jsxDEV(ExpandedRowContent, {\n            fieldList: props.fieldList,\n            fieldValues: props.fieldValues\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 37\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this);\n    });\n  }\n\n  _s(getExpandedBoxes, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    style: style.container,\n    children: getExpandedBoxes()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ExtendedTableRow, \"I7QC4X+jmPI6e3g1FRp/ACDQTWs=\");\n\n_c = ExtendedTableRow;\nconst style = {\n  container: {\n    width: \"100%\",\n    height: \"100%\",\n    flexDirection: \"row\"\n  },\n  boxWrapper: {\n    position: \"relative\",\n    backgroundColor: \"#ffa3a3\"\n  },\n  extendedLineTitle: {\n    display: \"flex\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    fontSize: \"18px\",\n    color: \"#000000\",\n    padding: \"16px 0\"\n  },\n  boxButton: {\n    border: \"none\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    left: \"10px\",\n    top: \"8px\"\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ExtendedTableRow\");","map":{"version":3,"sources":["C:/Users/Engenharia/Desktop/Projetos/Projeto-1/projeto1-front-end/src/components/extendedTableRow/index.jsx"],"names":["React","useEffect","useState","ReactDOM","UAParser","FontAwesomeIcon","faArrowUp","faArrowRight","ExpandedRowContent","ExtendedTableRow","props","boxColapsed","setBoxColapsed","handleClick","newIndex","currentIndex","console","log","getExpandedBoxes","Object","keys","fieldList","titles","map","title","index","style","boxWrapper","extendedLineTitle","boxButton","fontSize","color","fieldValues","container","width","height","flexDirection","position","backgroundColor","display","textAlign","justifyContent","padding","border","textDecoration","cursor","borderRadius","left","top"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {UAParser} from 'ua-parser-js'; \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp,faArrowRight} from '@fortawesome/free-solid-svg-icons'; \r\nimport ExpandedRowContent from '../expandedRowContent';\r\n\r\n/**\r\n * @file module:src/components/extendedTableRow/index.jsx  \r\n * @param {array} props.thisUserData - Array containing data from the user __currentAccess, currentAddress, currentJob, productsBuyed__\r\n * @returns - extended row, when click in the button will show the content of the field name clicked \r\n */\r\nexport default function ExtendedTableRow(props){  \r\n    // Variables to pass the specified content needed to custom expanded box\r\n    \r\n    // let accessData = props.thisUserData.currentAccess; \r\n    // let addressData = props.thisUserData.currentAddress; \r\n    // let jobData = props.thisUserData.currentJob; \r\n    // let productData = props.thisUserData.productsBuyed; \r\n    // let parser = new UAParser();\r\n    // let uaString = props.thisUserData.currentAccess.user_access_user_agent;\r\n    // let OS = parser.setUA(uaString).getOS();\r\n    // props.thisUserData.currentAccess.userOs = OS.name+' '+OS.version;\r\n\r\n    const [boxColapsed, setBoxColapsed] = useState(null); \r\n    \r\n    /**\r\n     * @function module:src/components/extendedTableRow/extendedTableRow~handleClick\r\n     * @summary - when the button is clicked, open only the clicked field in the device window \r\n     */\r\n    function handleClick(newIndex) {\r\n        let currentIndex = boxColapsed; \r\n        if (newIndex !== currentIndex)\r\n            currentIndex = newIndex; \r\n        else\r\n            currentIndex = null; \r\n        setBoxColapsed(currentIndex);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(\"CHAMANDO USER EFFECT\");\r\n        console.log(\"BOX COLAPSED\",boxColapsed);\r\n        // getExpandedBoxes();\r\n    },[getExpandedBoxes()])\r\n\r\n    function getExpandedBoxes(){\r\n        console.log(\"BOX COLLAPSED\",boxColapsed);\r\n        console.log(Object.keys(props.fieldList));\r\n        let titles = Object.keys(props.fieldList); \r\n        useEffect(()=>{\r\n            \r\n        })\r\n        return(\r\n            titles.map((title,index)=>{\r\n                    return (\r\n                        <div style={style.boxWrapper}>\r\n                            <h1 style={style.extendedLineTitle}>{title}</h1>\r\n                            <button onClick={()=>handleClick({index})} style={style.boxButton}>\r\n                                { (boxColapsed && boxColapsed.index === index) ? \r\n                                    <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                                    : \r\n                                    <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                                }\r\n                                { (boxColapsed && boxColapsed.index === index) ? \r\n                                    <ExpandedRowContent\r\n                                        fieldList = {props.fieldList}\r\n                                        fieldValues = {props.fieldValues}\r\n                                    />\r\n                                    :\r\n                                    null\r\n                                } \r\n                            </button>\r\n                        </div>\r\n                    );    \r\n                })\r\n        )\r\n        \r\n    };\r\n    \r\n    return (   \r\n        <div id=\"container\" style={style.container}>\r\n            {getExpandedBoxes()}\r\n\r\n\r\n            {/* <div style={style.boxWrapper}>\r\n                <h1 style={style.extendedLineTitle}>\r\n                    Acesso\r\n                </h1>\r\n                <button onClick={()=>handleClick(0)}  style={style.boxButton}>\r\n                    { (boxColapsed === 0) ? \r\n                        <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                        : \r\n                        <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                    }\r\n                </button>\r\n                { (boxColapsed === 0) ? \r\n                    <ExpandedRowContent\r\n                        fieldList = {props.fieldList}\r\n                        fieldValues = {props.fieldValues}\r\n                    />\r\n                    :\r\n                    null\r\n                } */}\r\n\r\n                {/* { (boxColapsed === 0) ? \r\n                    <ExpandedRowContent\r\n                        fieldList = {[\r\n                            {label: \"Rede\",fieldKey: \"user_access_business_technoloy\"},\r\n                            {label: \"Login\",fieldKey: \"user_access_login\"},\r\n                            {label: \"SO\",fieldKey: \"userOs\"},\r\n                            {label: \"IP\",fieldKey: \"user_access_ip_address\"}\r\n                        ]}\r\n                        fieldValues = {accessData}\r\n                    />\r\n                    :\r\n                    null\r\n                } */}\r\n            {/* </div> */}\r\n            {/* <div style={style.boxWrapper}>\r\n                <h1 style={style.extendedLineTitle}>\r\n                    Endereço do Usuário\r\n                </h1>\r\n                <button onClick={()=>handleClick(1)}  style={style.boxButton}>\r\n                    { (boxColapsed === 1) ? \r\n                        <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                        : \r\n                        <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                    }\r\n                </button>\r\n                { (boxColapsed === 1) ? \r\n                    <ExpandedRowContent\r\n                        fieldList = {[\r\n                            {label: \"País\",fieldKey: \"user_address_country\"},\r\n                            {label: \"Estado\",fieldKey: \"user_address_state\"},\r\n                            {label: \"Cidade\",fieldKey: \"user_address_city\"},\r\n                            {label: \"Rua\",fieldKey: \"user_address_street_name\"},\r\n                            {label: \"Endereço\",fieldKey: \"user_address_street_address\"}\r\n                        ]}\r\n                        fieldValues = {addressData}\r\n                    /> \r\n                    : \r\n                    null\r\n                }\r\n            </div>\r\n            <div style={style.boxWrapper}> \r\n                <h1 style={style.extendedLineTitle}>\r\n                    Emprego \r\n                </h1>\r\n                <button onClick={()=>handleClick(2)}  style={style.boxButton}>\r\n                    { (boxColapsed === 2)? \r\n                        <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                        : \r\n                        <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                    }\r\n                </button>\r\n                { (boxColapsed === 2)? \r\n                    <ExpandedRowContent\r\n                        fieldList = {[\r\n                            {label: \"Emprego\",fieldKey: \"user_job_title\"},\r\n                            {label: \"Endereço do emprego\",fieldKey: \"user_job_address\"}\r\n                        ]}\r\n                        fieldValues = {jobData}\r\n                    /> \r\n                    : \r\n                    null\r\n                }\r\n            </div>\r\n            <div style={style.boxWrapper}> \r\n                <h1 style={style.extendedLineTitle}>\r\n                    Produto Comprado\r\n                </h1>\r\n                <button onClick={()=>handleClick(3)}  style={style.boxButton}>\r\n                    { (boxColapsed === 3) ? \r\n                        <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                        : \r\n                        <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                    }\r\n                </button>\r\n                { (boxColapsed === 3) ? \r\n                    <ExpandedRowContent\r\n                    fieldList = {[\r\n                        {label: \"Empresa\",fieldKey: \"user_product_buyed_company_name\"},\r\n                        {label: \"Nome\",fieldKey: \"user_product_buyed_product_name\"},\r\n                        {label: \"Material\",fieldKey: \"user_product_buyed_product_material\"},\r\n                        {label: \"Descrição\",fieldKey: \"user_product_buyed_product_description\"} \r\n                    ]}\r\n                    fieldValues = {productData}\r\n                    /> \r\n                    :\r\n                    null\r\n                }\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst style = {\r\n    container: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        flexDirection: \"row\"\r\n    },\r\n    boxWrapper:{\r\n        position: \"relative\",\r\n        backgroundColor: \"#ffa3a3\"\r\n    },\r\n    extendedLineTitle:{\r\n        display: \"flex\",\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\", \r\n        fontSize : \"18px\",\r\n        color: \"#000000\",\r\n        padding: \"16px 0\"\r\n    },\r\n    boxButton:{\r\n        border: \"none\",\r\n        textDecoration: \"none\",\r\n        cursor: \"pointer\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        left: \"10px\",\r\n        top: \"8px\"\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Engenharia\\\\Desktop\\\\Projetos\\\\Projeto-1\\\\projeto1-front-end\\\\src\\\\components\\\\extendedTableRow\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowUp, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport ExpandedRowContent from '../expandedRowContent';\nimport CustomTable from '../customTable';\n/**\r\n * @file module:src/components/extendedTableRow/index.jsx  \r\n * @param {array} props.thisUserData - Array containing data from the user __currentAccess, currentAddress, currentJob, productsBuyed__\r\n * @param {array} props.fieldList - Array containing the list of boxes that can be expanded\r\n * @param {array} props.fieldValues - Array containing keys to access values from thisUserData\r\n * @param {string} props.expandedType - String containing the type of the box when expanded\r\n * @returns - extended row, when click in the button will show the content of the field name clicked \r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExtendedTableRow(props) {\n  _s();\n\n  const [boxColapsed, setBoxColapsed] = useState(null);\n  /**\r\n   * @function module:src/components/extendedTableRow/extendedTableRow~handleClick\r\n   * @summary - when the button is clicked, open only the clicked field in the device window \r\n   */\n\n  function handleClick(newIndex) {\n    let currentIndex = boxColapsed;\n    if (newIndex !== currentIndex) currentIndex = newIndex;else currentIndex = null;\n    setBoxColapsed(currentIndex);\n  }\n\n  useEffect(() => {}, [boxColapsed]);\n\n  function getExpandibleBoxes() {\n    let titles = Object.keys(props.fieldList);\n    let fieldList = Object.values(props.fieldList);\n    let fieldValues = Object.values(props.fieldValues);\n    return titles.map((title, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: style.boxWrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          style: style.extendedLineTitle,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleClick(index),\n          style: style.boxButton,\n          children: boxColapsed === index ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowUp,\n            id: props.index,\n            style: {\n              fontSize: \"30px\",\n              color: \"#363636\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faArrowRight,\n            id: props.index,\n            style: {\n              fontSize: \"30px\",\n              color: \"#363636\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this), props.expandedType === \"lines\" ? boxColapsed === index ? /*#__PURE__*/_jsxDEV(ExpandedRowContent, {\n          fieldList: fieldList[index],\n          fieldValues: props.thisUserData[fieldValues[index]]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 37\n        }, this) : null : boxColapsed === index ? /*#__PURE__*/_jsxDEV(CustomTable, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 37\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 25\n      }, this);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    style: style.container,\n    children: getExpandibleBoxes()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ExtendedTableRow, \"I7QC4X+jmPI6e3g1FRp/ACDQTWs=\");\n\n_c = ExtendedTableRow;\nconst style = {\n  container: {\n    width: \"100%\",\n    height: \"100%\",\n    flexDirection: \"row\"\n  },\n  boxWrapper: {\n    position: \"relative\",\n    backgroundColor: \"#ffa3a3\"\n  },\n  extendedLineTitle: {\n    display: \"flex\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    fontSize: \"18px\",\n    color: \"#000000\",\n    padding: \"16px 0\"\n  },\n  boxButton: {\n    border: \"none\",\n    textDecoration: \"none\",\n    cursor: \"pointer\",\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    left: \"10px\",\n    top: \"8px\"\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ExtendedTableRow\");","map":{"version":3,"sources":["C:/Users/Engenharia/Desktop/Projetos/Projeto-1/projeto1-front-end/src/components/extendedTableRow/index.jsx"],"names":["React","useEffect","useState","FontAwesomeIcon","faArrowUp","faArrowRight","ExpandedRowContent","CustomTable","ExtendedTableRow","props","boxColapsed","setBoxColapsed","handleClick","newIndex","currentIndex","getExpandibleBoxes","titles","Object","keys","fieldList","values","fieldValues","map","title","index","style","boxWrapper","extendedLineTitle","boxButton","fontSize","color","expandedType","thisUserData","container","width","height","flexDirection","position","backgroundColor","display","textAlign","justifyContent","padding","border","textDecoration","cursor","borderRadius","left","top"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowUp,faArrowRight} from '@fortawesome/free-solid-svg-icons'; \r\nimport ExpandedRowContent from '../expandedRowContent';\r\nimport CustomTable from '../customTable';\r\n\r\n/**\r\n * @file module:src/components/extendedTableRow/index.jsx  \r\n * @param {array} props.thisUserData - Array containing data from the user __currentAccess, currentAddress, currentJob, productsBuyed__\r\n * @param {array} props.fieldList - Array containing the list of boxes that can be expanded\r\n * @param {array} props.fieldValues - Array containing keys to access values from thisUserData\r\n * @param {string} props.expandedType - String containing the type of the box when expanded\r\n * @returns - extended row, when click in the button will show the content of the field name clicked \r\n */\r\nexport default function ExtendedTableRow(props){  \r\n    const [boxColapsed, setBoxColapsed] = useState(null); \r\n    \r\n    /**\r\n     * @function module:src/components/extendedTableRow/extendedTableRow~handleClick\r\n     * @summary - when the button is clicked, open only the clicked field in the device window \r\n     */\r\n    function handleClick(newIndex) {\r\n        let currentIndex = boxColapsed; \r\n        if (newIndex !== currentIndex)\r\n            currentIndex = newIndex; \r\n        else\r\n            currentIndex = null; \r\n        setBoxColapsed(currentIndex);\r\n    }\r\n\r\n    useEffect(()=>{\r\n    },[boxColapsed])\r\n\r\n    function getExpandibleBoxes(){\r\n        let titles = Object.keys(props.fieldList); \r\n        let fieldList = Object.values(props.fieldList);\r\n        let fieldValues = Object.values(props.fieldValues);\r\n        return(\r\n            titles.map((title,index)=>{\r\n                    return (\r\n                        <div style={style.boxWrapper}>\r\n                            <h1 style={style.extendedLineTitle}>{title}</h1>\r\n                            <button onClick={()=>handleClick(index)} style={style.boxButton}>\r\n                                { (boxColapsed === index) ? \r\n                                    <FontAwesomeIcon icon={faArrowUp} id={props.index}  style={{fontSize:\"30px\",color:\"#363636\"}}/> \r\n                                    : \r\n                                    <FontAwesomeIcon icon={faArrowRight} id={props.index} style={{fontSize:\"30px\",color:\"#363636\"}}/>\r\n                                }\r\n                            </button>\r\n                            { props.expandedType === \"lines\" ? \r\n                                (boxColapsed === index) ? \r\n                                    <ExpandedRowContent\r\n                                        fieldList = {fieldList[index]}\r\n                                        fieldValues = {props.thisUserData[fieldValues[index]]}\r\n                                    />\r\n                                    :\r\n                                    null\r\n                                \r\n                                :   (boxColapsed === index) ? \r\n                                    <CustomTable>\r\n                                        \r\n                                    </CustomTable>\r\n                                    :\r\n                                    null\r\n                            }\r\n                        </div>\r\n                    );    \r\n                })\r\n        )\r\n        \r\n    };\r\n    \r\n    return (   \r\n        <div id=\"container\" style={style.container}>\r\n            {getExpandibleBoxes()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst style = {\r\n    container: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        flexDirection: \"row\"\r\n    },\r\n    boxWrapper:{\r\n        position: \"relative\",\r\n        backgroundColor: \"#ffa3a3\"\r\n    },\r\n    extendedLineTitle:{\r\n        display: \"flex\",\r\n        textAlign: \"center\",\r\n        justifyContent: \"center\", \r\n        fontSize : \"18px\",\r\n        color: \"#000000\",\r\n        padding: \"16px 0\"\r\n    },\r\n    boxButton:{\r\n        border: \"none\",\r\n        textDecoration: \"none\",\r\n        cursor: \"pointer\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        left: \"10px\",\r\n        top: \"8px\"\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}